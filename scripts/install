#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

ynh_script_progression --message="Storing installation settings..." --time --weight=1

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH_URL
admin=$YNH_APP_ARG_ADMIN
language=$YNH_APP_ARG_LANGUAGE
is_public=$YNH_APP_ARG_IS_PUBLIC

# Github Social Integration
github_key=$YNH_APP_ARG_GITHUB_KEY
github_secret=$YNH_APP_ARG_GITHUB_SECRET
github_scope=$YNH_APP_ARG_GITHUB_SCOPE

# BitBucket Social Integration
bitbucket_key=$YNH_APP_ARG_BITBUCKET_KEY
bitbucket_secret=$YNH_APP_ARG_BITBUCKET_SECRET

# Twitter Social Integration
twitter_key=$YNH_APP_ARG_TWITTER_KEY
twitter_secret=$YNH_APP_ARG_TWITTER_SECRET

# Openstreetmap Social Integration
openstreetmap_key=$YNH_APP_ARG_OPENSTREETMAP_KEY
openstreetmap_secret=$YNH_APP_ARG_OPENSTREETMAP_SECRET

app=$YNH_APP_INSTANCE_NAME

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name



#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

ynh_script_progression --message="Validating installation parameters..." --time --weight=1

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"
ynh_user_exists "$admin" || ynh_die "user $admin does not exist"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app language $language
ynh_app_setting_set $app is_public $is_public
ynh_app_setting_set $app db_name $db_name
ynh_app_setting_set $app final_path $final_path

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Configuring firewall..." --time --weight=1

### Use these lines if you have to open a port for the application
### `ynh_find_port` will find the first available port starting from the given port.
### If you're not using these lines:
###		- Remove the section "CLOSE A PORT" in the remove script

# Find an available port
port=$(ynh_find_port --port=8095)
ynh_app_setting_set --app=$app --key=port --value=$port

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_script_progression --message="Installing dependencies..." --time --weight=1

ynh_install_app_dependencies postgresql postgresql-server-dev-9.6 postgis postgresql-9.6-postgis-2.3 python-pip git python-virtualenv virtualenvwrapper python3-dev python3-setuptools libtiff5-dev libjpeg62-turbo-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk python3.5-dev python-dev python-imaging postgresql-9.6-postgis-scripts

#=================================================
# CREATE DEDICATED USER
#=================================================

ynh_script_progression --message="Configuring system user..." --time --weight=1

# Create a system user
ynh_system_user_create --username=$app

#=================================================
# Prepare Umap to be installed
#=================================================

ynh_script_progression --message="Preparing Umap to be installed..." --time --weight=1

sudo mkdir -p "${final_path}/venv"
sudo mkdir "${final_path}/static"
sudo mkdir "${final_path}/data"

sudo chown -R $app:$app $final_path

#=================================================
# Create role and database with a password
#=================================================

ynh_script_progression --message="Setting up databse for Umap..." --time --weight=1

ynh_psql_setup_db --db_user=$db_user --db_name=$db_name

# Activate PostGIS extension
ynh_psql_create_extension $app postgis

#=================================================
# Installation de "umap"
#=================================================

ynh_script_progression --message="Installation of Umap..." --time --weight=1

exec_as "$app" "/usr/bin/virtualenv -p /usr/bin/python3 --distribute --no-site-packages ${final_path}/venv"
exec_as "$app" "cd ${final_path} && source ${final_path}/venv/bin/activate && pip3 install umap-project && pip3 install uwsgi"

localfile="${final_path}/venv/local.py"
exec_as "$app" "cd ${final_path} && source ${final_path}/venv/bin/activate && wget https://raw.githubusercontent.com/umap-project/umap/master/umap/settings/local.py.sample -O ${localfile}"

# Replace variables configuration 
secret=$(ynh_string_random 24)
language="$(echo $language | head -c 2)"
ynh_replace_config_umap

# Install umap
exec_as "$app" "cd ${final_path} && source ${final_path}/venv/bin/activate && export UMAP_SETTINGS=${localfile} && umap migrate && echo yes | umap collectstatic && umap storagei18n"
# Create superuser
exec_as "$app" "cd ${final_path} && source ${final_path}/venv/bin/activate && export UMAP_SETTINGS=${localfile} && umap createsuperuser --username ${admin} --email ${admin}@${domain} --noinput"

# Create datalayer directory
sudo mkdir /opt/umap/data/datalayer
sudo chown -R umap:users /opt/umap/data/datalayer

#=================================================
# Copy Files
#=================================================

ynh_script_progression --message="Copying files..." --time --weight=1

sudo cp ../conf/uwsgi_params $final_path/uwsgi_params
sudo cp ../conf/uwsgi.ini $final_path/uwsgi.ini
sudo sed -i "s@__APP__@$app@g" $final_path/uwsgi.ini

#=================================================
# Add umap.uwsgi as a service
#=================================================

ynh_script_progression --message="Configuring Umap service..." --time --weight=1

# Config service
sudo mkdir -p /etc/uwsgi/apps-enabled/
sudo ln -s $final_path/uwsgi.ini /etc/uwsgi/apps-enabled/umap.uwsgi.ini

sudo systemctl enable uwsgi
sudo systemctl restart uwsgi
sudo yunohost service add umap.uwsgi

#=================================================
# NGINX CONFIGURATION
#=================================================

ynh_script_progression --message="Configuring nginx web server..." --time --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --time --weight=1

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================

yunohost service add $app --description "A short description of the app" --log "/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================

ynh_script_progression --message="Starting a systemd service..." --time --weight=1

ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# SETUP FAIL2BAN
#=================================================
ynh_script_progression --message="Configuring fail2ban..." --time --weight=1

# Create a dedicated fail2ban config
ynh_add_fail2ban_config --logpath="/var/log/nginx/${domain}-error.log" --failregex="Regex to match into the log for a failed login"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring SSOwat..." --time --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --time --last
